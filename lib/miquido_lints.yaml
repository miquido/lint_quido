analyzer:
  plugins:
    - dart_code_metrics

  # Explanation for this settings are described in Step 3 of this https://dash-overflow.net/articles/getting_started/
  strong-mode:
    implicit-casts: false
    implicit-dynamic: false
  
  exclude:
    - "**/*.g.dart"
    - "**/*.freezed.dart"
    - lib/generated/**
    - generated_plugin_registrant.dart

  language:
    strict-raw-types: true
    strict-casts: true
    strict-inference: true

  errors:
    missing_required_param: error
    missing_return: error
    unawaited_futures: warning
    unused_import: warning
    prefer_const_constructors: info
    prefer_const_constructors_in_immutables: info

linter:
  rules:
    - always_declare_return_types
    - always_put_control_body_on_new_line
    - always_put_required_named_parameters_first
    - always_require_non_null_named_parameters
    # - always_specify_types - Incompatible with avoid_types_on_closure_parameters, which we prefer
    - always_use_package_imports
    - annotate_overrides
    # - avoid_annotating_with_dynamic - Super problematic to fix with avoid_types_on_closure_parameters enabled
    - avoid_bool_literals_in_conditional_expressions
    - avoid_catches_without_on_clauses
    - avoid_catching_errors
    # - avoid_classes_with_only_static_members - We know, but somewhat this doesnt fell right and clean
    - avoid_double_and_int_checks
    - avoid_dynamic_calls
    - avoid_empty_else
    - avoid_equals_and_hash_code_on_mutable_classes
    - avoid_escaping_inner_quotes
    - avoid_field_initializers_in_const_classes
    - avoid_final_parameters
    - avoid_function_literals_in_foreach_calls
    - avoid_implementing_value_types
    - avoid_init_to_null
    - avoid_js_rounded_ints
    - avoid_multiple_declarations_per_line
    - avoid_null_checks_in_equality_operators
    - avoid_positional_boolean_parameters
    - avoid_print
    - avoid_private_typedef_functions
    - avoid_redundant_argument_values
    - avoid_relative_lib_imports
    - avoid_renaming_method_parameters
    - avoid_return_types_on_setters
    - avoid_returning_null
    - avoid_returning_null_for_future
    - avoid_returning_null_for_void
    - avoid_returning_this
    - avoid_setters_without_getters
    - avoid_shadowing_type_parameters
    - avoid_single_cascade_in_expression_statements
    - avoid_slow_async_io
    - avoid_type_to_string
    - avoid_types_as_parameter_names
    - avoid_types_on_closure_parameters
    - avoid_unnecessary_containers
    - avoid_unused_constructor_parameters
    - avoid_void_async
    - avoid_web_libraries_in_flutter
    - await_only_futures
    - camel_case_extensions
    - camel_case_types
    - cancel_subscriptions
    - cascade_invocations
    - cast_nullable_to_non_nullable
    - close_sinks
    - comment_references
    - conditional_uri_does_not_exist
    - constant_identifier_names
    - control_flow_in_finally
    - curly_braces_in_flow_control_structures
    # - depend_on_referenced_packages - This will make you at some point add all pub.dev to your pubspec file. Maybe suitable for ultra small petprojets with one dependency at max.
    - deprecated_consistency
    # - diagnostic_describe_all_properties - Add unncessary complexity to code and makes it difficult to read
    - directives_ordering
    - do_not_use_environment
    - empty_catches
    - empty_constructor_bodies
    - empty_statements
    - eol_at_end_of_file
    - exhaustive_cases
    - file_names
    - flutter_style_todos
    - hash_and_equals
    - implementation_imports
    - invariant_booleans
    - iterable_contains_unrelated_type
    - join_return_with_assignment
    - leading_newlines_in_multiline_strings
    - library_names
    - library_prefixes
    # - library_private_types_in_public_api - Disabled as any stateful widget triggers it
    # - lines_longer_than_80_chars - In Miquido there are two teams: 100 or 120. One of them is wrong.
    - list_remove_unrelated_type
    - literal_only_boolean_expressions
    - missing_whitespace_between_adjacent_strings
    - no_adjacent_strings_in_list
    - no_default_cases
    - no_duplicate_case_values
    - no_leading_underscores_for_library_prefixes
    - no_leading_underscores_for_local_identifiers
    - no_logic_in_create_state
    - no_runtimeType_toString
    - non_constant_identifier_names
    - noop_primitive_operations
    - null_check_on_nullable_type_parameter
    - null_closures
    - omit_local_variable_types
    # - one_member_abstracts - We do like simple interfaces
    - only_throw_errors
    - overridden_fields
    - package_api_docs
    - package_names
    - package_prefixed_library_names
    - parameter_assignments
    - prefer_adjacent_string_concatenation
    - prefer_asserts_in_initializer_lists
    - prefer_asserts_with_message
    - prefer_collection_literals
    - prefer_conditional_assignment
    - prefer_const_constructors # - This might be a annoying, so we recommend to disable it in your static analysis, but enable it every 2 weeks or before release to clean up and disable it again ;)
    - prefer_const_constructors_in_immutables # - As above
    - prefer_const_declarations
    - prefer_const_literals_to_create_immutables
    - prefer_constructors_over_static_methods
    - prefer_contains
    # - prefer_double_quotes - We prefer_single_quotes
    - prefer_equal_for_default_values
    # - prefer_expression_function_bodies - We like mix of return and =>
    - prefer_final_fields
    - prefer_final_in_for_each
    - prefer_final_locals
    # - prefer_final_parameters - Not comfortable to use, besides if you try something funky then parameter_assignments will be triggered
    - prefer_for_elements_to_map_fromIterable
    - prefer_foreach
    - prefer_function_declarations_over_variables
    - prefer_generic_function_type_aliases
    - prefer_if_elements_to_conditional_expressions
    - prefer_if_null_operators
    - prefer_initializing_formals
    - prefer_inlined_adds
    - prefer_int_literals
    - prefer_interpolation_to_compose_strings
    - prefer_is_empty
    - prefer_is_not_empty
    - prefer_is_not_operator
    - prefer_iterable_whereType
    # - prefer_mixin - it is triggered almost every time you do `with someAbstractClass` which makes you refactor abstract class to mixin  
    - prefer_null_aware_method_calls
    - prefer_null_aware_operators
    # - prefer_relative_imports - We always_use_package_imports
    - prefer_single_quotes
    - prefer_spread_collections
    - prefer_typing_uninitialized_variables
    - prefer_void_to_null
    - provide_deprecation_message
    # - public_member_api_docs - Too much comments will be in code after enabling that, maybe useful in ultra large projects, sdks with lots of functionalites
    - recursive_getters
    - require_trailing_commas
    - secure_pubspec_urls
    - sized_box_for_whitespace
    - sized_box_shrink_expand
    - slash_for_doc_comments
    - sort_child_properties_last
    - sort_constructors_first
    - sort_pub_dependencies
    - sort_unnamed_constructors_first
    - test_types_in_equals
    - throw_in_finally
    - tighten_type_of_initializing_formals
    - type_annotate_public_apis
    - type_init_formals
    - unawaited_futures
    - unnecessary_await_in_return
    - unnecessary_brace_in_string_interps
    - unnecessary_const
    - unnecessary_constructor_name
    # - unnecessary_final - absurd justification for this one
    - unnecessary_getters_setters
    - unnecessary_lambdas
    - unnecessary_late
    - unnecessary_new
    - unnecessary_null_aware_assignments
    - unnecessary_null_checks
    - unnecessary_null_in_if_null_operators
    - unnecessary_nullable_for_final_variable_declarations
    - unnecessary_overrides
    - unnecessary_parenthesis
    - unnecessary_raw_strings
    - unnecessary_statements
    - unnecessary_string_escapes
    - unnecessary_string_interpolations
    - unnecessary_this
    - unrelated_type_equality_checks
    - unsafe_html
    # - use_build_context_synchronously - this is mostly useful in some animations, but most of the time it unnecessary makes code more complex
    - use_decorated_box
    - use_full_hex_values_for_flutter_colors
    - use_function_type_syntax_for_parameters
    - use_if_null_to_convert_nulls_to_bools
    - use_is_even_rather_than_modulo
    - use_key_in_widget_constructors
    - use_late_for_private_fields_and_variables
    - use_named_constants
    - use_raw_strings
    - use_rethrow_when_possible
    - use_setters_to_change_properties
    - use_string_buffers
    - use_test_throws_matchers
    - use_to_and_as_if_applicable
    - valid_regexps
    - void_checks

# More about this additional linter here: https://dartcodemetrics.dev/docs/rules/overview
# This is more strict linter, and it is very cool to follow it, but it is not mandatory to obey.
# Only set of default rules above is manatory to resolve and pass pipeline
# to exectute run `flutter analyze`. It should show "No issues found!" message.
dart_code_metrics:
  rules:
    - avoid-collection-methods-with-unrelated-types
    # - avoid-dynamic - as much as we would love to have it, sometimes it is necessary
    - avoid-global-state
    # - avoid-ignoring-return-values - sometimes method return something, but you dont care, and that is ok
    # - avoid-late-keyword - makes no sense
    - avoid-missing-enum-constant-in-map
    - avoid-nested-conditional-expressions
    # - avoid-non-null-assertion - this is good lint, but sometimes is unfixable
    # - avoid-throw-in-catch-block - enabling it only because of provided justification in our opinion is just flexing
    - avoid-unnecessary-type-assertions
    - avoid-unnecessary-type-casts
    - avoid-unrelated-type-assertions
    - avoid-unused-parameters
    # - ban-name - nothing we can think of
    - binary-expression-operand-order
    - double-literal-format:
        exclude:
          - test/**
    # - format-comment - disabled as too strict, and comments are - you know - comments
    - member-ordering-extended: #This is order that works perfect with Flutter Stylizer for VS Code: https://marketplace.visualstudio.com/items?itemName=gmlewis-vscode.flutter-stylizer
        alphabetize: false
        order:
          - constructors
          - static-public-fields
          - static-private-fields
          - fields
          - overriden-methods
          - methods
    # - newline-before-return: - this is just stupid, especially when you have one-line methods
    #     exclude:
    #       - test/**
    - no-boolean-literal-compare
    - no-empty-block:
        exclude:
          - test/**
    # - no-equal-arguments - disabled as triggered when setting same paddings, sizes in widgets etc...
    - no-equal-then-else
    # - no-magic-number - disabled as it makes you extract each height, width (and similar properties) value to separate variables 
    - no-object-declaration
    - prefer-async-await
    # - prefer-conditional-expressions - disabled as sometimes this condition is not as readible as you would expected
    - prefer-correct-identifier-length:
        exceptions: ['i', 'x', 'id', 'db']
        min-identifier-length: 3
        max-identifier-length: 35
    - prefer-correct-type-name
    # - prefer-first - disabled as oldschool array[0] is clearer
    - prefer-last # but this one is much better that array[array.length-1]
    - prefer-match-file-name:
        severity: error
        exclude:
          - test/**
    # - prefer-trailing-comma - this one is pure hardcore and too strict
    - tag-name:
        exclude:
          - test/**
    - always-remove-listener
    # - avoid-border-all - proposed solution is adding extra code complexiticy for meaningless profit
    - avoid-returning-widgets:
        severity: error
    - avoid-unnecessary-setstate
    - avoid-wrapping-in-padding
    # - prefer-const-border-radius - proposed solution is adding extra code complexiticy for meaningless profit
    - prefer-extracting-callbacks:
        ignored-named-arguments:
          - listener
          - listenWhen
          - buildWhen
          - itemBuilder
    - prefer-single-widget-per-file:
        ignore-private-widgets: true
    - prefer-intl-name
    - provide-correct-intl-args

  metrics:
    cyclomatic-complexity: 10
    halstead-volume: 150
    lines-of-code: 70
    maintainability-index: 60
    maximum-nesting-level: 4
    number-of-parameters: 4
    source-lines-of-code: 40
    number-of-methods: 7
    weight-of-class: 0.33

    technical-debt:
      threshold: 1
      todo-cost: 3
      ignore-cost: 2
      ignore-for-file-cost: 4
      as-dynamic-cost: 1
      deprecated-annotations-cost: 4
      file-nullsafety-migration-cost: 5
      unit-type: "MD"

  anti-patterns:
    - long-method:
        severity: warning
        exclude:
          - test/**
